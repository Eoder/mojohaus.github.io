 ------
 Performing a Release
 ------
 Trygve Laugstol
 ------
 $Id$

~~ 
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~  http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.
~~

Performing a Release

 This is a check list of stuff that has to be done before a new version of a plugin is released.

  * {{{Preparing_to_Release}Preparing to Release}}

  * {{{Graduating_from_the_Sandbox}Graduating from the Sandbox}}

  * {{{Preparing_for_the_First_Production_Release}Preparing for the First Production Release}}
  
  * {{{Making_GPG_Keys}Making GPG Keys}}

  * {{{Staging_the_Release}Staging the Release}}

  * {{{Call_a_Vote}Call a Vote}}

  * {{{Promoting_the_Release}Promoting the Release}}

  * {{{Dropping_the_Release}Dropping the Release}}

  * {{{Releasing_the_Mojo_Parent_POM}Releasing the Mojo Parent POM}}

* {Preparing to Release}

  * Make sure the site documentation is up to date and follows the {{{./guidelines.html}Development Guidelines}}.

  * All open JIRA issues should be closed or agreed to be scheduled for a future
    version. 

  * Plugin must be documented and preferably have unit and integration tests.

  * Update <<<changes.xml>>> to include all issues in JIRA that were fixed.

  * If the release is a bugfix release (incrementing z): explicitly document the bugs fixed.

  * If the release is a minor release (incrementing y): document the new features added. Make sure that these new
    features are properly documented, including:

   * Javadoc tags if the Mojo is written in Java

   * Examples

  * Resolve all SNAPSHOTs if it's a proper release on all dependencies: Normal dependencies, build plugins, reporting
    plugins.

  * Ensure the plugin complies with its intended minimum JRE requirement. For instance, if Java 1.4 is to be supported,
    actually set your <<<JAVA_HOME>>> to a JDK 1.4 and run <<<mvn clean verify>>>. This will catch references to classes
    or methods that were accidentally used but are only available in later versions of Java.

  * Check that the POM properly declares its dependencies, i.e. run <<<mvn dependency:analyze>>> and fix any problems.
  
  * To be able to use the maven-release-plugin you need to have a svn client available on your system path. To verify if
    it's there, execute <<<svn help>>> on the project root.    
  
  * Be sure you have generated a gpg-key before performing the release. 

  []

* {Graduating from the Sandbox}

 If the plugin is making its first official release, it should graduate from the sandbox. When this occurs, the
 following steps should be followed:

  * Make sure the site follows the {{{./guidelines.html}Development Guidelines}}.

  * Call a vote for the graduation on the dev mailing list. See below for more
    info on how to do this.

  * Move the svn project from <<<{{{http://svn.codehaus.org/mojo/trunk/sandbox/}sandbox/}}>>> to
    <<<{{{http://svn.codehaus.org/mojo/trunk/mojo/}mojo/}}>>>.

  * Change the POM parent from <<<mojo-sandbox-parent>>> to <<<mojo-parent>>>.

  * Move the plugin site link on the plugin list from the section "Sandbox Plugins" to "Pre-release Plugins" by editing the
    <<<{{{http://svn.codehaus.org/mojo/site/src/site/apt/plugins.apt}plugins.apt}}>>> document. Redeploy the site and
    verify that it is functional.

* {Preparing for the First Production Release}

 When a plugin is ready to have its first production release (i.e. not an alpha
 or beta release) there are a couple of extra things that needs to be taken
 care of:

  * Create a separate JIRA project for the plugin. Every production plugin must
    have its own JIRA project. Pre-production plugins share the MOJO project in
    JIRA. If you don't know how to do this, or don't have the necessary karma,
    just ask for help on the dev mailing list.

  * Make sure that the plugin's site passes the documentation checker plugin
    test. Run 

+-----
mvn docck:check
+-----

    If there are any errors - fix them. There are a couple of errors that might
    not need to be fixed. As an example: it's better <not> to add an FAQ
    document than to add a bogus one.

  []

* {Making GPG Keys}

  Before releasing for the first time you have to generate a GPG key and publish it.
  Information can also be found on Sonatype's {{{https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven}How To Generate PGP Signatures With Maven}}.

  * Download GPG from {{http://www.gnupg.org/download/}} , follow the instructions and install it to your system. Verify your gpg installation by running gpg with the version flag, i.e. <<<gpg --version>>>
  
  * Execute <<<gpg --gen-key>>> and answer the questions. Most of the time you can use the default.
    
*-----------------------------------------------------+-------------+
| Please select what kind of key you want:            | 
|  (1) DSA and Elgamal (default)                      | 1
|  (2) DSA (sign only)                                |
|  (5) RSA (sign only)                                |
*-----------------------------------------------------+-------------+
| What keysize do you want? (2048)                    | 2048
*-----------------------------------------------------+-------------+
| Please specify how long the key should be valid.    | 
|    0 = key does not expire                          |
| <n>  = key expires in n days                        |
| <n>w = key expires in n weeks                       |
| <n>m = key expires in n months                      |
| <n>y = key expires in n years                       |
| Key is valid for? (0)                               | 0
*-----------------------------------------------------+-------------+
| Key does not expire at all                          |
| Is this correct? (y/N)                              | y
*-----------------------------------------------------+-------------+
| Real name:                                          | <your real name>
*-----------------------------------------------------+-------------+
| Email address:                                      | <your email address>
*-----------------------------------------------------+-------------+
| Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? | O
*-----------------------------------------------------+-------------+

  
  * Execute <<<gpg --list-sigs ">>><your real name><<<" && gpg --armor --export ">>><your real name><<<">>> and
  visit {{http://pgp.mit.edu/}} to distribute your public key, so users can verify your files. 
  This webpage contains a form where you have to copy your key. 
  
  * Update {{https://svn.codehaus.org/mojo/site/src/site/resources/KEYS}} by expanding this file with your key. 
  If you deploy the site by running <<<mvn site:deploy>>> the key will become available on the mojo-site. 
  Since all mojo-developers should put their key here it's easy for users to verify mojo-artifacts. 

* {Staging the Release}
  
 The release process should be done using the
 {{{http://maven.apache.org/plugins/maven-release-plugin/}Maven Release Plugin}}:

  * Execute <<<mvn release:prepare>>>

    This will make sure all code is checked in, tag the release and make sure the POM has no snapshot dependencies. If
    your local username is not the same as your codehaus username, be sure to add <<<-Dusername=>>><\<codehaus username\>>.

  * Execute <<<mvn release:perform>>>

     This will build the plugin, javadocs and source. Everything will be deployed to the Nexus Repository Manager, 
     ready to be staged.
     <<Be aware, that the site will be built and deployed as well>>. 
     This means the site will up to date before the voting has even started. Trying to update the site afterwards seems 
     to be much more complicated, this way we can assure the site will reflect the intended version.    
     
  * Verify that the plugin site deployment occurred successfully.
  
  * Log into {{https://nexus.codehaus.org/}} and "Close" the staging repository.
  

* {Call a Vote}
 
 Before a release can occur, a vote typically takes place. This is initiated with an email to the dev list, preferrably
 with a subject that starts with <<<[vote]>>>. Explain the plugin, status and any other info you feel relevant. The
 standard is to wait 72 hours for responses. This gives other developers time to verify the quality of the plugin
 before placing their vote. See the {{{http://www.apache.org/foundation/voting.html}Apache Voting Guidelines}} for more
 information.
   
* {Promoting the Release}

  When the vote has passed, do the following:

  * Log into {{https://nexus.codehaus.org/}} and "Release" the staging repository.
  
  * Wait some time and find the artifacts synced on central. 
        The synchronization typically occurs every 4 hours but allow for it take up to 24 hrs.

  * Update the <<<{{{http://svn.codehaus.org/mojo/site/src/site/apt/plugins.apt}plugins.apt}}>>> document to
        reflect the new release. Redeploy the mojo site and verify that it is functional.

  * Record the release date for the version in the plugin's JIRA project and create a new version for future
        development/issues.

  * Send out an annoucement email to {{{mailto:dev@mojo.codehaus.org}dev@mojo.codehaus.org}},
        {{{mailto:user@mojo.codehaus.org}user@mojo.codehaus.org}} and
        {{{mailto:users@maven.apache.org}users@maven.apache.org}}.

  * TODO: if there's a feed containing all releases, get the release into that feed.

* {Dropping the Release}  

  If the vote failed, the following steps have to be taken:

  * Log into {{https://nexus.codehaus.org/}} and "Drop" the staging repository.
  
  * Rollback any SCM-changes.
  

* {Releasing the Mojo Parent POM}

  Of course, to release the Mojo Parent POM, a vote takes place just for an ordinary plugin release. But when it comes
  to actually perform the release, there are some differences to watch out for:

  [[1]] Execute <<<mvn release:prepare>>>

  [[2]] Execute <<<mvn release:perform -Dgoals=deploy>>>
  
    The important thing to note here is the parameter <<<-Dgoals=deploy>>>. By default, the Release Plugin would execute
    the phases <<<deploy>>> and <<<site-deploy>>> on the parent POM. However, the site of the parent POM is not meant to
    be deployed, we have a separate project for this. The configuration of the site distribution in the parent POM
    exists solely for the purpose of inheritance by the plugins. Accidentally deploying the parent's site would damage
    the Mojo website, most notably the <<<index.html>>>.

  [[3]] Update the {{{./guidelines.html}Development Guidelines}} to indicate the new POM version.
